/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package nl.esciencecenter.e3dchem.gpcrdb.client;

import nl.esciencecenter.e3dchem.gpcrdb.client.ApiCallback;
import nl.esciencecenter.e3dchem.gpcrdb.client.ApiClient;
import nl.esciencecenter.e3dchem.gpcrdb.client.ApiException;
import nl.esciencecenter.e3dchem.gpcrdb.client.ApiResponse;
import nl.esciencecenter.e3dchem.gpcrdb.client.Configuration;
import nl.esciencecenter.e3dchem.gpcrdb.client.Pair;
import nl.esciencecenter.e3dchem.gpcrdb.client.ProgressRequestBody;
import nl.esciencecenter.e3dchem.gpcrdb.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import nl.esciencecenter.e3dchem.gpcrdb.client.model.ProteinFamilySerializer;
import nl.esciencecenter.e3dchem.gpcrdb.client.model.ProteinSerializer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServicesproteinfamilyApi {
    private ApiClient apiClient;

    public ServicesproteinfamilyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServicesproteinfamilyApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for proteinFamilyChildrenListGET
     * @param slug  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call proteinFamilyChildrenListGETCall(String slug, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/proteinfamily/children/{slug}/"
            .replaceAll("\\{" + "slug" + "\\}", apiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call proteinFamilyChildrenListGETValidateBeforeCall(String slug, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling proteinFamilyChildrenListGET(Async)");
        }
        

        com.squareup.okhttp.Call call = proteinFamilyChildrenListGETCall(slug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of child families of a protein family
     * Get a list of child families of a protein family&lt;br/&gt;/proteinfamily/children/{slug}/&lt;br/&gt;{slug} is a protein family identifier, e.g. 001_001_001
     * @param slug  (required)
     * @return ProteinFamilySerializer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProteinFamilySerializer proteinFamilyChildrenListGET(String slug) throws ApiException {
        ApiResponse<ProteinFamilySerializer> resp = proteinFamilyChildrenListGETWithHttpInfo(slug);
        return resp.getData();
    }

    /**
     * Get a list of child families of a protein family
     * Get a list of child families of a protein family&lt;br/&gt;/proteinfamily/children/{slug}/&lt;br/&gt;{slug} is a protein family identifier, e.g. 001_001_001
     * @param slug  (required)
     * @return ApiResponse&lt;ProteinFamilySerializer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProteinFamilySerializer> proteinFamilyChildrenListGETWithHttpInfo(String slug) throws ApiException {
        com.squareup.okhttp.Call call = proteinFamilyChildrenListGETValidateBeforeCall(slug, null, null);
        Type localVarReturnType = new TypeToken<ProteinFamilySerializer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of child families of a protein family (asynchronously)
     * Get a list of child families of a protein family&lt;br/&gt;/proteinfamily/children/{slug}/&lt;br/&gt;{slug} is a protein family identifier, e.g. 001_001_001
     * @param slug  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call proteinFamilyChildrenListGETAsync(String slug, final ApiCallback<ProteinFamilySerializer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = proteinFamilyChildrenListGETValidateBeforeCall(slug, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProteinFamilySerializer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for proteinFamilyDescendantListGET
     * @param slug  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call proteinFamilyDescendantListGETCall(String slug, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/proteinfamily/descendants/{slug}/"
            .replaceAll("\\{" + "slug" + "\\}", apiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call proteinFamilyDescendantListGETValidateBeforeCall(String slug, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling proteinFamilyDescendantListGET(Async)");
        }
        

        com.squareup.okhttp.Call call = proteinFamilyDescendantListGETCall(slug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of descendant families of a protein family
     * Get a list of descendant families of a protein family&lt;br/&gt;/proteinfamily/descendants/{slug}/&lt;br/&gt;{slug} is a protein family identifier, e.g. 001_001_001
     * @param slug  (required)
     * @return ProteinFamilySerializer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProteinFamilySerializer proteinFamilyDescendantListGET(String slug) throws ApiException {
        ApiResponse<ProteinFamilySerializer> resp = proteinFamilyDescendantListGETWithHttpInfo(slug);
        return resp.getData();
    }

    /**
     * Get a list of descendant families of a protein family
     * Get a list of descendant families of a protein family&lt;br/&gt;/proteinfamily/descendants/{slug}/&lt;br/&gt;{slug} is a protein family identifier, e.g. 001_001_001
     * @param slug  (required)
     * @return ApiResponse&lt;ProteinFamilySerializer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProteinFamilySerializer> proteinFamilyDescendantListGETWithHttpInfo(String slug) throws ApiException {
        com.squareup.okhttp.Call call = proteinFamilyDescendantListGETValidateBeforeCall(slug, null, null);
        Type localVarReturnType = new TypeToken<ProteinFamilySerializer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of descendant families of a protein family (asynchronously)
     * Get a list of descendant families of a protein family&lt;br/&gt;/proteinfamily/descendants/{slug}/&lt;br/&gt;{slug} is a protein family identifier, e.g. 001_001_001
     * @param slug  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call proteinFamilyDescendantListGETAsync(String slug, final ApiCallback<ProteinFamilySerializer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = proteinFamilyDescendantListGETValidateBeforeCall(slug, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProteinFamilySerializer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for proteinFamilyDetailGET
     * @param slug  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call proteinFamilyDetailGETCall(String slug, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/proteinfamily/{slug}/"
            .replaceAll("\\{" + "slug" + "\\}", apiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call proteinFamilyDetailGETValidateBeforeCall(String slug, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling proteinFamilyDetailGET(Async)");
        }
        

        com.squareup.okhttp.Call call = proteinFamilyDetailGETCall(slug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a single protein family instance
     * Get a single protein family instance&lt;br/&gt;/proteinfamily/{slug}/&lt;br/&gt;{slug} is a protein family identifier, e.g. 001_001_001
     * @param slug  (required)
     * @return ProteinFamilySerializer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProteinFamilySerializer proteinFamilyDetailGET(String slug) throws ApiException {
        ApiResponse<ProteinFamilySerializer> resp = proteinFamilyDetailGETWithHttpInfo(slug);
        return resp.getData();
    }

    /**
     * Get a single protein family instance
     * Get a single protein family instance&lt;br/&gt;/proteinfamily/{slug}/&lt;br/&gt;{slug} is a protein family identifier, e.g. 001_001_001
     * @param slug  (required)
     * @return ApiResponse&lt;ProteinFamilySerializer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProteinFamilySerializer> proteinFamilyDetailGETWithHttpInfo(String slug) throws ApiException {
        com.squareup.okhttp.Call call = proteinFamilyDetailGETValidateBeforeCall(slug, null, null);
        Type localVarReturnType = new TypeToken<ProteinFamilySerializer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single protein family instance (asynchronously)
     * Get a single protein family instance&lt;br/&gt;/proteinfamily/{slug}/&lt;br/&gt;{slug} is a protein family identifier, e.g. 001_001_001
     * @param slug  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call proteinFamilyDetailGETAsync(String slug, final ApiCallback<ProteinFamilySerializer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = proteinFamilyDetailGETValidateBeforeCall(slug, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProteinFamilySerializer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for proteinFamilyListGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call proteinFamilyListGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/proteinfamily/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call proteinFamilyListGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = proteinFamilyListGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of protein families
     * Get a list of protein families&lt;br/&gt;/proteinfamily/
     * @return List&lt;ProteinFamilySerializer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProteinFamilySerializer> proteinFamilyListGET() throws ApiException {
        ApiResponse<List<ProteinFamilySerializer>> resp = proteinFamilyListGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get a list of protein families
     * Get a list of protein families&lt;br/&gt;/proteinfamily/
     * @return ApiResponse&lt;List&lt;ProteinFamilySerializer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProteinFamilySerializer>> proteinFamilyListGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = proteinFamilyListGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ProteinFamilySerializer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of protein families (asynchronously)
     * Get a list of protein families&lt;br/&gt;/proteinfamily/
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call proteinFamilyListGETAsync(final ApiCallback<List<ProteinFamilySerializer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = proteinFamilyListGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProteinFamilySerializer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for proteinsInFamilyListGET
     * @param slug  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call proteinsInFamilyListGETCall(String slug, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/proteinfamily/proteins/{slug}/"
            .replaceAll("\\{" + "slug" + "\\}", apiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call proteinsInFamilyListGETValidateBeforeCall(String slug, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling proteinsInFamilyListGET(Async)");
        }
        

        com.squareup.okhttp.Call call = proteinsInFamilyListGETCall(slug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of proteins in a protein family
     * Get a list of proteins in a protein family&lt;br/&gt;/proteinfamily/proteins/{slug}/&lt;br/&gt;{slug} is a protein family identifier, e.g. 001_001_001
     * @param slug  (required)
     * @return List&lt;ProteinSerializer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProteinSerializer> proteinsInFamilyListGET(String slug) throws ApiException {
        ApiResponse<List<ProteinSerializer>> resp = proteinsInFamilyListGETWithHttpInfo(slug);
        return resp.getData();
    }

    /**
     * Get a list of proteins in a protein family
     * Get a list of proteins in a protein family&lt;br/&gt;/proteinfamily/proteins/{slug}/&lt;br/&gt;{slug} is a protein family identifier, e.g. 001_001_001
     * @param slug  (required)
     * @return ApiResponse&lt;List&lt;ProteinSerializer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProteinSerializer>> proteinsInFamilyListGETWithHttpInfo(String slug) throws ApiException {
        com.squareup.okhttp.Call call = proteinsInFamilyListGETValidateBeforeCall(slug, null, null);
        Type localVarReturnType = new TypeToken<List<ProteinSerializer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of proteins in a protein family (asynchronously)
     * Get a list of proteins in a protein family&lt;br/&gt;/proteinfamily/proteins/{slug}/&lt;br/&gt;{slug} is a protein family identifier, e.g. 001_001_001
     * @param slug  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call proteinsInFamilyListGETAsync(String slug, final ApiCallback<List<ProteinSerializer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = proteinsInFamilyListGETValidateBeforeCall(slug, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProteinSerializer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for proteinsInFamilySpeciesListGET
     * @param slug  (required)
     * @param latinName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call proteinsInFamilySpeciesListGETCall(String slug, String latinName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/proteinfamily/proteins/{slug}/{latin_name}/"
            .replaceAll("\\{" + "slug" + "\\}", apiClient.escapeString(slug.toString()))
            .replaceAll("\\{" + "latin_name" + "\\}", apiClient.escapeString(latinName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call proteinsInFamilySpeciesListGETValidateBeforeCall(String slug, String latinName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling proteinsInFamilySpeciesListGET(Async)");
        }
        
        // verify the required parameter 'latinName' is set
        if (latinName == null) {
            throw new ApiException("Missing the required parameter 'latinName' when calling proteinsInFamilySpeciesListGET(Async)");
        }
        

        com.squareup.okhttp.Call call = proteinsInFamilySpeciesListGETCall(slug, latinName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of proteins in a protein family
     * Get a list of proteins in a protein family&lt;br/&gt;/proteinfamily/proteins/{slug}/{species}&lt;br/&gt;{slug} is a protein family identifier, e.g. 001_001_001&lt;br/&gt;{latin_name} is a species identifier from Uniprot, e.g. Homo sapiens
     * @param slug  (required)
     * @param latinName  (required)
     * @return List&lt;ProteinSerializer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProteinSerializer> proteinsInFamilySpeciesListGET(String slug, String latinName) throws ApiException {
        ApiResponse<List<ProteinSerializer>> resp = proteinsInFamilySpeciesListGETWithHttpInfo(slug, latinName);
        return resp.getData();
    }

    /**
     * Get a list of proteins in a protein family
     * Get a list of proteins in a protein family&lt;br/&gt;/proteinfamily/proteins/{slug}/{species}&lt;br/&gt;{slug} is a protein family identifier, e.g. 001_001_001&lt;br/&gt;{latin_name} is a species identifier from Uniprot, e.g. Homo sapiens
     * @param slug  (required)
     * @param latinName  (required)
     * @return ApiResponse&lt;List&lt;ProteinSerializer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProteinSerializer>> proteinsInFamilySpeciesListGETWithHttpInfo(String slug, String latinName) throws ApiException {
        com.squareup.okhttp.Call call = proteinsInFamilySpeciesListGETValidateBeforeCall(slug, latinName, null, null);
        Type localVarReturnType = new TypeToken<List<ProteinSerializer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of proteins in a protein family (asynchronously)
     * Get a list of proteins in a protein family&lt;br/&gt;/proteinfamily/proteins/{slug}/{species}&lt;br/&gt;{slug} is a protein family identifier, e.g. 001_001_001&lt;br/&gt;{latin_name} is a species identifier from Uniprot, e.g. Homo sapiens
     * @param slug  (required)
     * @param latinName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call proteinsInFamilySpeciesListGETAsync(String slug, String latinName, final ApiCallback<List<ProteinSerializer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = proteinsInFamilySpeciesListGETValidateBeforeCall(slug, latinName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProteinSerializer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
